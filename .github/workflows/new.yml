
name: Deploy PHP to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: 'ap-northeast-3'
  WEB_ROOT: '/var/www/html'
  RDS_ENDPOINT: ${{ secrets.RDS_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check for composer.json
      id: check-composer
      run: |
        if [ -f "composer.json" ]; then
          echo "composer_exists=true" >> $GITHUB_OUTPUT
        else
          echo "composer_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Install PHP dependencies
      if: steps.check-composer.outputs.composer_exists == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y zip unzip
        curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
        composer install --no-dev --optimize-autoloader

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create deployment package
      run: |
        # Create clean deployment directory
        mkdir -p deployment
        rsync -av \
          --exclude='.git/' \
          --exclude='.github/' \
          --exclude='tests/' \
          --exclude='*.env' \
          --exclude='deployment/' \
          ./ deployment/
        
        # Create zip file
        cd deployment && zip -r ../deployment.zip ./*
        ls -lh ../deployment.zip

    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "deployment.zip"
        target: "/tmp/deployment.zip"
        rm: true
        overwrite: true

    - name: Deploy application on EC2
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create backup
          backup_dir="${{ env.WEB_ROOT }}_backup_$(date +%Y%m%d%H%M%S)"
          sudo mkdir -p "$backup_dir"
          sudo cp -rp ${{ env.WEB_ROOT }}/* "$backup_dir/"
          
          # Deploy new version
          sudo rm -rf ${{ env.WEB_ROOT }}/*
          sudo unzip -o /tmp/deployment.zip -d ${{ env.WEB_ROOT }}/
          sudo rm /tmp/deployment.zip
          
          # Configure environment
          sudo tee ${{ env.WEB_ROOT }}/.env <<EOF
          DB_HOST=${{ env.RDS_ENDPOINT }}
          DB_NAME=${{ env.DB_NAME }}
          DB_USER=${{ secrets.RDS_USERNAME }}
          DB_PASSWORD=${{ secrets.RDS_PASSWORD }}
          EOF
          
          # Set permissions
          sudo chown -R www-data:www-data ${{ env.WEB_ROOT }}
          sudo find ${{ env.WEB_ROOT }} -type d -exec chmod 755 {} \;
          sudo find ${{ env.WEB_ROOT }} -type f -exec chmod 644 {} \;
          
          # Restart web server
          sudo systemctl restart apache2 || sudo systemctl restart nginx
          
          # Clean up old backups (keep last 3)
          sudo ls -dt ${{ env.WEB_ROOT }}_backup_* | tail -n +4 | sudo xargs rm -rf